module main (
	input clk,
	output reg [31:0] avm_address,
   output reg [31:0] avm_burstcount,
   output reg        avm_read,
   output reg [127:0] avm_readdata,
   output reg [15:0]  avm_byteenable
);
	logic [2:0] source;
	wire [127:0] x;
	reg [7:0] address=0;
	
	always @(posedge clk) begin
		address = address+1;
	end
	
	avalon_host dut (
    .clk(clk),
    .rst_n(source[0]),
	 .s_axi_data(x),
    .s_axi_valid(source[1]),
    .s_axi_last(source[2]),
    .avm_address(avm_address),
    .avm_burstcount(avm_burstcount),
    .avm_read(avm_read),
    .avm_readdata(avm_readdata),
    .avm_byteenable(avm_byteenable)
);
	
	 vio vio (
		.source(source),     //    sources.source
      .source_clk(clk)  // source_clk.clk
	);
	 rom rom (
		.q(x),       //       q.dataout
		.address(address), // address.address
		.clock(clk)    //   clock.clk
	);
	

endmodule
